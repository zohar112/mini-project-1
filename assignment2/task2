import { Result, makeFailure, makeOk } from "../shared/result";

import { isEmpty, map } from "ramda";
import { AppExp, CExp, Exp, isLetPlusExp, LetExp, LetPlusExp, makeLetExp, makeLetPlusExp, Program }  from "./L31-ast";
import { isAppExp, isAtomicExp, isCExp, isDefineExp, isExp, isIfExp, isLetExp, isLitExp,
         isProcExp, isProgram }  from "./L31-ast";
import { makeAppExp, makeDefineExp, makeIfExp, makeProcExp, makeProgram } from "./L31-ast";
import { first, second, rest, allT } from "../shared/list";


/*
Purpose: Transform L31 AST to L3 AST
Signature: l31ToL3(l31AST)
Type: [Exp | Program] => Result<Exp | Program>
*/
export const L31ToL3 = (exp: Exp | Program): Result<Exp | Program> =>
    isExp(exp) ? makeOk(rewriteAllLetExp(exp)) :
    isProgram(exp) ? makeOk(makeProgram(map(rewriteAllLetExp, exp.exps))) :
    makeFailure("Never");

export const rewriteLetPlus = (e: LetPlusExp): LetExp =>
    e.bindings.length <= 1 ? 
         makeLetExp(e.bindings,e.body) :
         makeLetExp([first(e.bindings)], [rewriteLetPlus(makeLetPlusExp(rest(e.bindings),e.body))]);
/*
Purpose: rewrite a single LetExp as a lambda-application form
Signature: rewriteLet(cexp)
Type: [LetExp => AppExp]
*/

/*
Purpose: rewrite all occurrences of let in an expression to lambda-applications.
Signature: rewriteAllLet(exp)
Type: [Program | Exp -> Program | Exp]

export const rewriteAllLet = (exp: Program | Exp): Program | Exp =>
    isExp(exp) ? rewriteAllLetExp(exp) :
    isProgram(exp) ? makeProgram(map(rewriteAllLetExp, exp.exps)) :
    exp;*/

const rewriteAllLetExp = (exp: Exp): Exp =>
    isDefineExp(exp) ? makeDefineExp(exp.var, rewriteAllLetCExp(exp.val)) :
    isCExp(exp) ? rewriteAllLetCExp(exp) :
    exp;

const rewriteAllLetCExp = (exp: CExp): CExp =>
    isAtomicExp(exp) ? exp :
    isLitExp(exp) ? exp :
    isIfExp(exp) ? makeIfExp(rewriteAllLetCExp(exp.test),
                             rewriteAllLetCExp(exp.then),
                             rewriteAllLetCExp(exp.alt)) :
    isAppExp(exp) ? makeAppExp(rewriteAllLetCExp(exp.rator),
                               map(rewriteAllLetCExp, exp.rands)) :
    isProcExp(exp) ? makeProcExp(exp.args, map(rewriteAllLetCExp, exp.body)) :
    isLetPlusExp(exp) ? rewriteAllLetCExp(rewriteLetPlus(exp)):
    isLetExp(exp) ? makeLetExp(exp.bindings, map(rewriteAllLetCExp, exp.body)):
    exp;

